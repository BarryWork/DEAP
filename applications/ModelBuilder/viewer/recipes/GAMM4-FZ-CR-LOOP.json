{"nodes":[{"name":"Display","id":"display-scatter","group":"Display","description":"something","inputs":[{"name":"input","type":"constant-text","id":"d2ff5368-b2ee-4325-81e7-936254f697cd"}],"outputs":[],"state":[],"screen-position":{"top":237,"left":1476},"gid":"532cbdf2-863e-4d63-9f82-da6c5c3b269c","enabledisable-id":"c84b6f22-e11f-49b5-94e5-f3fea0169977"},{"name":"NDA17","id":"data-nda17","group":"Data","description":"published release","inputs":[{"name":"in1","type":"constant-text","id":"058032eb-2a92-4698-b090-6b4b68524055"},{"name":"in2","type":"constant-text","id":"5467c3d0-18ad-42e6-b472-f549b56c62b7"},{"name":"in3","type":"constant-text","id":"d0b1e6c6-2e95-4e3a-badf-ce0051dbbf53"},{"name":"in4","type":"constant-text","id":"aba39fba-bfa3-457a-94a6-5bdce925fa14"},{"name":"in5","type":"constant-text","id":"2152e170-39c3-4621-bc9b-a1419c1e6f62"},{"name":"in6","type":"constant-text","id":"eaad9178-49a6-49e8-82ea-0bfabaecfae1"},{"name":"in7","type":"constant-text","id":"cf378cc2-5c7d-4096-9b3c-44e6eedf43b2"},{"name":"in8","type":"constant-text","id":"64de6011-ff94-4b30-8568-fec371dd6804"},{"name":"in9","type":"constant-text","id":"cda34d74-af74-41f3-9da3-b93c4f042af7"},{"name":"in10","type":"constant-text","id":"4bb52ced-5941-4611-9e73-809583bea80e"}],"outputs":[{"name":"out1","type":"constant-text","id":"1b27adc4-cdff-412c-872e-eef2f3b45f62"},{"name":"out2","type":"constant-text","id":"3ea903f2-93d1-4fa4-86a3-63e62e54bc59"},{"name":"out3","type":"constant-text","id":"6825b4df-6c7a-4d59-801c-f0bb2b52f327"},{"name":"out4","type":"constant-text","id":"45ea5645-07b0-4abe-bec0-d0aa9d481e2c"},{"name":"out5","type":"constant-text","id":"81450ccb-42b2-44b3-9dcb-16a791826b63"},{"name":"out6","type":"constant-text","id":"fe8ebb93-ed6a-4d42-98cb-82e072fad81a"},{"name":"out7","type":"constant-text","id":"d2dc7279-8eec-4f52-afca-c62d40486fd0"},{"name":"out8","type":"constant-text","id":"f6a6c305-7219-4be4-88d5-e8875da3ce11"},{"name":"out9","type":"constant-text","id":"bafe1270-7036-41b2-bf47-57f3f6404614"},{"name":"out10","type":"constant-text","id":"dfb15146-bb00-4655-858c-62ccec593001"}],"state":[{"name":"data-source","type":"text","gid":"3fe74f19-e9ad-40ae-bb4a-67602438499f","value":"NDA17"}],"screen-position":{"top":178,"left":641},"gid":"3fe74f19-e9ad-40ae-bb4a-67602438499f","enabledisable-id":"1f15a0d8-bf6d-4ff3-a7c8-6d0a24fd08fd"},{"name":"Display Text","id":"display-text","group":"Display","description":"something","inputs":[{"name":"input","type":"constant-text","id":"e376616d-2f95-408c-b225-860d270247e1"}],"outputs":[],"state":[],"screen-position":{"top":297,"left":1476},"gid":"2f69a29e-c34f-4901-85b7-28375fe65a75","enabledisable-id":"f0aec7e0-7d9d-4af5-8144-1d1b6162c86b"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"1ba4c758-4cd7-4bfe-8870-8588f311c769"}],"state":[{"name":"id","type":"text","gid":"edfaccc6-a8ea-485b-aa46-027a73f23a4a","value":"covfixed-SES"},{"name":"name","type":"text","gid":"edfaccc6-a8ea-485b-aa46-027a73f23a4a","value":"Race\/Ethnicity"},{"name":"default","type":"text","gid":"edfaccc6-a8ea-485b-aa46-027a73f23a4a","value":"race.ethnicity"},{"name":"value","type":"text","gid":"edfaccc6-a8ea-485b-aa46-027a73f23a4a","value":"race.ethnicity"}],"screen-position":{"top":352,"left":394},"gid":"edfaccc6-a8ea-485b-aa46-027a73f23a4a","enabledisable-id":"f4556710-c76c-4483-ab1e-947b2c312f4c"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"ced51cbb-abb4-45c3-a5e3-d4fa06cc6cc3"}],"state":[{"name":"id","type":"text","gid":"8898067d-5af4-4f2b-987e-ec18d342ec8d","value":"covuser"},{"name":"name","type":"text","gid":"8898067d-5af4-4f2b-987e-ec18d342ec8d","value":"Other Independent Variables"},{"name":"default","type":"text","gid":"8898067d-5af4-4f2b-987e-ec18d342ec8d","value":""},{"name":"value","type":"text","gid":"8898067d-5af4-4f2b-987e-ec18d342ec8d","value":""}],"screen-position":{"top":291,"left":396},"gid":"8898067d-5af4-4f2b-987e-ec18d342ec8d","enabledisable-id":"e659247e-a9ab-4f85-a66d-5e163b2050b2"},{"name":"Display","id":"display-scatter","group":"Display","description":"something","inputs":[{"name":"input","type":"constant-text","id":"e9dfd108-c1e1-4b85-b50b-eb3b27dc6394"}],"outputs":[],"state":[],"screen-position":{"top":917,"left":752},"gid":"dd017387-53dd-4118-8086-0e4c55b5b073","enabledisable-id":"95355ef9-9e54-44d6-ba96-b97b6debb6df"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"440da713-92c5-4b9d-9205-74e314b0cb82"}],"state":[{"name":"id","type":"text","gid":"81602fe1-e444-478f-bc44-f1267c07ef02","value":"random-SITE"},{"name":"name","type":"text","gid":"81602fe1-e444-478f-bc44-f1267c07ef02","value":"SITE"},{"name":"default","type":"text","gid":"81602fe1-e444-478f-bc44-f1267c07ef02","value":"abcd_site"},{"name":"value","type":"text","gid":"81602fe1-e444-478f-bc44-f1267c07ef02","value":"abcd_site"}],"screen-position":{"top":416,"left":391},"gid":"81602fe1-e444-478f-bc44-f1267c07ef02","enabledisable-id":"50b41238-7cf8-4ae5-9f7e-b0d45a87a9bb"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"797e8a1c-0799-4e39-aef3-ec50e81a90c5"}],"state":[{"name":"id","type":"text","gid":"4f6770cb-7021-416a-a2c5-e00195128158","value":"random-Family"},{"name":"name","type":"text","gid":"4f6770cb-7021-416a-a2c5-e00195128158","value":"FAMILY"},{"name":"default","type":"text","gid":"4f6770cb-7021-416a-a2c5-e00195128158","value":"rel_family_id"},{"name":"value","type":"text","gid":"4f6770cb-7021-416a-a2c5-e00195128158","value":"rel_family_id"}],"screen-position":{"top":476,"left":390},"gid":"4f6770cb-7021-416a-a2c5-e00195128158","enabledisable-id":"88e8e267-16d2-41f8-8d74-af56c57b83b9"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"3226f90e-a1ea-4e78-8772-8fa60a49eac4"}],"state":[{"name":"id","type":"text","gid":"79b74b4c-558e-4c6b-986b-4af80d5bd642","value":"covfixed-GENDER"},{"name":"name","type":"text","gid":"79b74b4c-558e-4c6b-986b-4af80d5bd642","value":"SEX"},{"name":"default","type":"text","gid":"79b74b4c-558e-4c6b-986b-4af80d5bd642","value":"sex"},{"name":"value","type":"text","gid":"79b74b4c-558e-4c6b-986b-4af80d5bd642","value":"sex"}],"screen-position":{"top":536,"left":392},"gid":"79b74b4c-558e-4c6b-986b-4af80d5bd642","enabledisable-id":"0d50399f-f5b8-4423-ab20-1681f1d20885"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"f046675d-5841-44cb-ab5e-60912f5c179a"}],"state":[{"name":"id","type":"text","gid":"8ae5b439-3b4e-4b25-b51b-20aca0df78fa","value":"covfixed-EDU"},{"name":"name","type":"text","gid":"8ae5b439-3b4e-4b25-b51b-20aca0df78fa","value":"EDU"},{"name":"default","type":"text","gid":"8ae5b439-3b4e-4b25-b51b-20aca0df78fa","value":"high.educ"},{"name":"value","type":"text","gid":"8ae5b439-3b4e-4b25-b51b-20aca0df78fa","value":"high.educ"}],"screen-position":{"top":595,"left":393},"gid":"8ae5b439-3b4e-4b25-b51b-20aca0df78fa","enabledisable-id":"ad85424b-d4cd-4ff5-92c2-d8e568860202"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"a090b405-f3af-4655-8706-24634c69200b"}],"state":[{"name":"id","type":"text","gid":"e1c54d37-f458-4be5-bfc7-58053bb08bdd","value":"covfixed-INC"},{"name":"name","type":"text","gid":"e1c54d37-f458-4be5-bfc7-58053bb08bdd","value":"INC"},{"name":"default","type":"text","gid":"e1c54d37-f458-4be5-bfc7-58053bb08bdd","value":"household.income"},{"name":"value","type":"text","gid":"e1c54d37-f458-4be5-bfc7-58053bb08bdd","value":"household.income"}],"screen-position":{"top":650,"left":392},"gid":"e1c54d37-f458-4be5-bfc7-58053bb08bdd","enabledisable-id":"28fb9525-fef0-453f-b747-67b4e973f5a9"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"3c06fa2a-5479-49f3-b1c9-fe1098420a57"}],"state":[{"name":"id","type":"text","gid":"1166850f-7097-4c58-a0f5-0a5ce64dabb8","value":"covfixed-MARITAL"},{"name":"name","type":"text","gid":"1166850f-7097-4c58-a0f5-0a5ce64dabb8","value":"MARITAL"},{"name":"default","type":"text","gid":"1166850f-7097-4c58-a0f5-0a5ce64dabb8","value":"married"},{"name":"value","type":"text","gid":"1166850f-7097-4c58-a0f5-0a5ce64dabb8","value":"married"}],"screen-position":{"top":703,"left":394},"gid":"1166850f-7097-4c58-a0f5-0a5ce64dabb8","enabledisable-id":"3ea8d4ce-d990-4dcc-b6f7-9e46756b0454"},{"name":"Measure Fixed","id":"measure-fixed","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"dfbdf064-5cf5-4087-b73f-e093fb340c12"}],"state":[{"name":"id","type":"text","gid":"5c77be8f-2ba0-4379-bf27-394f16177c24","value":"covfixed-AGE"},{"name":"name","type":"text","gid":"5c77be8f-2ba0-4379-bf27-394f16177c24","value":"AGE"},{"name":"default","type":"text","gid":"5c77be8f-2ba0-4379-bf27-394f16177c24","value":"interview_age"},{"name":"value","type":"text","gid":"5c77be8f-2ba0-4379-bf27-394f16177c24","value":"interview_age"}],"screen-position":{"top":766,"left":392},"gid":"5c77be8f-2ba0-4379-bf27-394f16177c24","enabledisable-id":"fd508c72-1033-446f-bdea-744d14512684"},{"name":"Display Line","id":"display-line","group":"Display","description":"something","inputs":[{"name":"input","type":"constant-text","id":"cc9e7950-f3b2-4a30-8446-456a05a22ffa"}],"outputs":[],"state":[],"screen-position":{"top":352,"left":1475},"gid":"ab7ce704-2559-4299-b838-88eb8803d854","enabledisable-id":"794adf52-0e25-49e7-a38e-67efed0f086a"},{"name":"Display Tunnel","id":"display-tunnel","group":"Display","description":"something","inputs":[{"name":"input","type":"constant-text","id":"62b02bc1-048f-43b2-8586-8fb643b1ee6b"}],"outputs":[],"state":[],"screen-position":{"top":414,"left":1475},"gid":"e9ec9481-f9f9-464c-a567-e4931dae43f4","enabledisable-id":"91ac25c0-9a3e-491f-8aff-d35c54a7db3f"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"a7cc9f44-4879-4118-b0ab-51f8e6169502"}],"state":[{"name":"id","type":"text","gid":"74e03bc4-592a-4f6d-b10b-ae134f4a3c2d","value":"smo.var"},{"name":"name","type":"text","gid":"74e03bc4-592a-4f6d-b10b-ae134f4a3c2d","value":"Smooth variables"},{"name":"default","type":"text","gid":"74e03bc4-592a-4f6d-b10b-ae134f4a3c2d"},{"name":"value","type":"text","gid":"74e03bc4-592a-4f6d-b10b-ae134f4a3c2d"}],"screen-position":{"top":256,"left":940},"gid":"74e03bc4-592a-4f6d-b10b-ae134f4a3c2d","enabledisable-id":"c762d60e-59a7-4688-96c3-49b43fd77acf"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"49e486ad-699c-412f-963c-d1ec0709cff9"}],"state":[{"name":"id","type":"text","gid":"d73b51e5-7f4b-47d1-93e9-4695339dcdb7","value":"log.var"},{"name":"name","type":"text","gid":"d73b51e5-7f4b-47d1-93e9-4695339dcdb7","value":"Log tranfomation"},{"name":"default","type":"text","gid":"d73b51e5-7f4b-47d1-93e9-4695339dcdb7"},{"name":"value","type":"text","gid":"d73b51e5-7f4b-47d1-93e9-4695339dcdb7"}],"screen-position":{"top":321,"left":943},"gid":"d73b51e5-7f4b-47d1-93e9-4695339dcdb7","enabledisable-id":"0a56230c-43b4-446c-b459-8f67e221eb00"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"28b12798-18bf-4a96-a27d-36c70120d0f6"}],"state":[{"name":"id","type":"text","gid":"a39dce10-ff4d-4315-bc1a-8cdd6e3d80f4","value":"int.var"},{"name":"name","type":"text","gid":"a39dce10-ff4d-4315-bc1a-8cdd6e3d80f4","value":"Interaction terms"},{"name":"default","type":"text","gid":"a39dce10-ff4d-4315-bc1a-8cdd6e3d80f4"},{"name":"value","type":"text","gid":"a39dce10-ff4d-4315-bc1a-8cdd6e3d80f4"}],"screen-position":{"top":383,"left":944},"gid":"a39dce10-ff4d-4315-bc1a-8cdd6e3d80f4","enabledisable-id":"a625024d-84c6-4ab5-afc2-8b97d6978517"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"08ddaa6d-2c77-4ade-ad36-d04596416214"}],"state":[{"name":"id","type":"text","gid":"3379f0c3-9925-4ce2-ba0e-9067d3cfc77e","value":"sq.var"},{"name":"name","type":"text","gid":"3379f0c3-9925-4ce2-ba0e-9067d3cfc77e","value":"Square terms"},{"name":"default","type":"text","gid":"3379f0c3-9925-4ce2-ba0e-9067d3cfc77e"},{"name":"value","type":"text","gid":"3379f0c3-9925-4ce2-ba0e-9067d3cfc77e"}],"screen-position":{"top":480,"left":954},"gid":"3379f0c3-9925-4ce2-ba0e-9067d3cfc77e","enabledisable-id":"43631271-058d-4caa-a505-6e8a9c2c63ea"},{"name":"Measure All (single)","id":"measure-single","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"b0b845c1-9494-462b-882a-b97383400416"}],"state":[{"name":"id","type":"text","gid":"dc6871d1-0fb3-4c86-a3ed-853909bfa05b","value":"depvar"},{"name":"name","type":"text","gid":"dc6871d1-0fb3-4c86-a3ed-853909bfa05b","value":"Dependent Variable (Y-axis)"},{"name":"default","type":"text","gid":"dc6871d1-0fb3-4c86-a3ed-853909bfa05b","value":"nihtbx_fluidcomp_uncorrected"},{"name":"value","type":"text","gid":"dc6871d1-0fb3-4c86-a3ed-853909bfa05b","value":"nihtbx_fluidcomp_uncorrected"}],"screen-position":{"top":97,"left":392},"gid":"dc6871d1-0fb3-4c86-a3ed-853909bfa05b","enabledisable-id":"b0d76d91-5280-41a7-a218-c7140e4fea9b"},{"name":"Measure All (single)","id":"measure-single","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"10c3487e-51ff-4862-b3d0-226fd4107478"}],"state":[{"name":"id","type":"text","gid":"00dd2e0c-4832-4a4f-bc25-9a49b5da81ce","value":"indepvar"},{"name":"name","type":"text","gid":"00dd2e0c-4832-4a4f-bc25-9a49b5da81ce","value":"Independent Variable (X-axis, for plotting)"},{"name":"default","type":"text","gid":"00dd2e0c-4832-4a4f-bc25-9a49b5da81ce","value":"dti_fiber_fa_l_ifo"},{"name":"value","type":"text","gid":"00dd2e0c-4832-4a4f-bc25-9a49b5da81ce","value":"dti_fiber_fa_l_ifo"}],"screen-position":{"top":168,"left":397},"gid":"00dd2e0c-4832-4a4f-bc25-9a49b5da81ce","enabledisable-id":"33572aea-ceaa-4d9c-9fd0-44d368bc3091"},{"name":"Measure All (single)","id":"measure-single","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"fffb4252-410a-4b9e-82e7-323d0c8ca46d"}],"state":[{"name":"id","type":"text","gid":"87e5931b-5dee-4af5-acda-cb6d2159f62d","value":"grvar"},{"name":"name","type":"text","gid":"87e5931b-5dee-4af5-acda-cb6d2159f62d","value":"Grouping Variable (for interaction and plotting)"},{"name":"default","type":"text","gid":"87e5931b-5dee-4af5-acda-cb6d2159f62d"},{"name":"value","type":"text","gid":"87e5931b-5dee-4af5-acda-cb6d2159f62d"}],"screen-position":{"top":573,"left":948},"gid":"87e5931b-5dee-4af5-acda-cb6d2159f62d","enabledisable-id":"b86a9aca-9f4b-4420-9de3-23f778af9a9d"},{"name":"Measure All (multi)","id":"measure-all-multi","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"049c008e-3e9f-43fb-bb41-0eefbf4937b8"}],"state":[{"name":"id","type":"text","gid":"087d2037-761a-47be-a65b-cbf13789f4ab","value":"ws.var"},{"name":"name","type":"text","gid":"087d2037-761a-47be-a65b-cbf13789f4ab","value":"winsorizing and sensing"},{"name":"default","type":"text","gid":"087d2037-761a-47be-a65b-cbf13789f4ab"},{"name":"value","type":"text","gid":"087d2037-761a-47be-a65b-cbf13789f4ab"}],"screen-position":{"top":665,"left":952},"gid":"087d2037-761a-47be-a65b-cbf13789f4ab","enabledisable-id":"3a4f46c9-ed86-4d1d-89b6-0ba83820f561"},{"name":"GAMM4","id":"model-gamm4","group":"Model","description":"A GAMM4 model","inputs":[{"name":"dep. var.","type":"constant-text","id":"1c321d5d-9c29-4230-8a27-31e0a03c163a"},{"name":"ind. var.","type":"constant-text","id":"e6e21ade-af9f-473a-bbd7-a10fc7ce37bc"},{"name":"user cov.","type":"constant-text","id":"ca1dc1b3-1f7c-4924-a336-42e32ad25ce7"},{"name":"cov. fixed","type":"constant-text","id":"1ae8bca6-3032-4096-b10c-57542d7acfe5"},{"name":"smo. var","type":"constant-text","id":"ffd98a46-903a-4bcb-88f6-3e5bc708c263"},{"name":"log. var","type":"constant-text","id":"fb967c61-4ba7-4fa4-a3dc-af1490f08718"},{"name":"int. var","type":"constant-text","id":"7eb5b00e-2691-470f-a80c-0907dd69dc35"},{"name":"sq. var","type":"constant-text","id":"d3b31483-dbfb-43d8-9944-ae4b22c36a79"},{"name":"gr. var","type":"constant-text","id":"70c815d1-a8b0-49f9-843b-ed55367693dd"},{"name":"ws. var","type":"constant-text","id":"47323a39-d2b2-42c1-8ad6-24c4e7dd527b"},{"name":"fl. var","type":"constant-text","id":"db5d6525-0f38-498f-910d-07f221ac7e65"}],"outputs":[{"name":"scatter","type":"scatter","id":"04c66995-b4b9-44aa-894b-c0ef3e78c660"},{"name":"statistics","type":"constant-text","id":"d5dc5d9e-d336-46c6-9522-5fa279c53a18"},{"name":"lineplot","type":"scatter","id":"2d27eac7-4f1c-4d6c-b429-0eb20e5c9ec6"},{"name":"tunnel","type":"scatter","id":"7413944d-42c5-421b-b233-4d759c0944c0"}],"state":[{"name":"model","type":"textarea","gid":"00368985-2e16-4889-835c-e2f2aca43438","value":"##########################\n##  user customization  ##\n##########################\n\n# Change the coding from factor levels to numbers\n#levels(data$physical_activity1_y) = c(\"\", 0:7);\n#data$physical_activity1_y = as.numeric(as.character(data$physical_activity1_y))\n\n# Change the reference category of a factor level variable\n# data$sex <- factor(data$sex, levels=c(\"M\",\"F\"))\n\n\n\n\nprint(toJSON(inputs))\n##################\n##  functions   ##\n##################\n\nMode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\nsep.vars = function(x){\n  x = gsub(\" \", \"\", x, fixed = TRUE)\n  x = unlist(strsplit(x,\"+\",fixed=T))\n  return(x)\n}\n\ncensor =  function(x, fraction=.005){\n  if(length(fraction) != 1 || fraction < 0 || fraction > 1){\n    stop(\"bad value for 'fraction'\")\n  }\n  lim <- quantile(x, probs=c(fraction\/2, 1-fraction\/2), na.rm = T)\n  x[ x < lim[1] ] <- NA\n  x[ x > lim[2] ] <- NA\n  x\n}\n\ngamm4loop = function(data, data.image, formulastr2){\n  betas1 = c()\n  pvals = c()\n  # data.merge = data\n  # data.image = betas \n  data.merge = merge(data, data.image, by = \"src_subject_id\")\n  # var.loop.indices = (ncol(data)+1):ncol(data.merge)\n  \n  for(ii in 1:(length(data.image)-1)){\n    # for(ii in 1:20){\n    # data.merge$x = newdata[,ii]\n    #or, via merge\n    data.merge$x = data.merge[, ncol(data)+ii]\n    \n    # formula = paste0(dependendVar,\" ~ x + \", paste(form_arr2,collapse='+'))\n    formula = paste0(formulastr2, \" + x\")\n    model = gamm4(formula = as.formula(formula) , random = ~(1|abcd_site\/rel_family_id), data = data.merge)\n    summary = summary(model$gam)$p.table\n    betas1[ii] = summary[rownames(summary) == \"x\", colnames(summary) == \"Estimate\"]\n    pvals[ii] = summary[rownames(summary) == \"x\", colnames(summary) == \"Pr(>|t|)\"]\n  }\n  return(list(betas1 = betas1 , pvals = pvals))\n}\n\n#########################\n##  data  extraction   ##\n#########################\n\n#exit script silently if @inputs is empyt\nempty = T;\nfor (key in names(inputs)){\n    print(inputs[[key]]);\n    print(length(inputs[[key]]))\n    if(length(inputs[[key]]) != 0 && inputs[[key]] != \"\"){\n        empty = F;\n    }\n}\n\nif(empty){\n    options(warn=-1)\n    opt <- options(show.error.messages=FALSE) \n    on.exit(options(opt)) \n    stop() \n}\n\n#By using Rserve gamm4 is already loaded\n\n### censor\/windsorize first\nwsVar = unlist(inputs[['ws.var']])\nwsVar = sep.vars(wsVar)\nif(length(wsVar)>0){\n  for(ii in 1:length(wsVar)){\n    if(class(data[,wsVar[ii]]) == \"numeric\"){\n      data[,wsVar[ii]] = censor(data[,wsVar[ii]])\n    }\n  }\n}\n\ndependendVar   = unlist(inputs[['dep.var.']]);\ndependendVar.name = NULL\n\nif(length(dependendVar) == 0 ){\n    stop(\"Dependent variable is empty.\")\n}\n\n##if y is log-transformed...\nif(substring(dependendVar,1,4) == \"log(\"){\n  dependendVar.name = substring(dependendVar,5,nchar(dependendVar)-1)\n  data$Y.log = log(data[[dependendVar.name]])\n  new.name = paste0(\"log.\",dependendVar.name)\n  names(data)[names(data) == \"Y.log\"] = new.name\n  dependendVar = new.name\n}\n\nindependendVar = unlist(inputs[['ind.var.']]);\nusercovVar     = paste(unlist(inputs[['usercov.']]),  sep='+')\n\nsmoothVar.all = unlist(inputs[['smo.var']])\nsmoothVar.all = sep.vars(smoothVar.all)\n\nlogVar = unlist(inputs[['log.var']])\nlogVar = sep.vars(logVar)\n\ninteractionVar = unlist(inputs[['int.var']])\n\nsqVar = unlist(inputs[['sq.var']])\nsqVar = sep.vars(sqVar)\nsqVar = substring(sqVar,1,nchar(sqVar)-2)\n\nsqVar_SQUARED = NULL\nif(length(sqVar)>0){\n  for(ii in 1:length(sqVar)){\n    sqVar_SQUARED[ii] = paste0(sqVar[ii],\"_SQUARED\")\n    data[,sqVar_SQUARED[ii]] = data[,sqVar[ii]]^2\n  }\n}\n\ngroupVar = unlist(inputs[['gr.var']])\nif(length(groupVar) > 0){\n  if(is.character(groupVar) & nchar(groupVar) ==0){\n    groupVar = NULL \n  } \n}\n\nsubsetVar   = unlist(inputs[['fl.var']]);\nif(length(subsetVar) > 0){\n  if(is.character(subsetVar) & nchar(subsetVar) ==0){\n    subsetVar = NULL \n  } \n}\n#Interacting grouping variable with independent variable\nif(length(groupVar)>0){\n  #may need to change it instead of searching for the string, it strips string first and looks for exact match\n  is.smooth = grepl(independendVar, smoothVar.all)\n  is.log =    independendVar %in% substring(logVar,5,nchar(logVar)-1)\n  is.square = independendVar %in% sqVar\n  ## If independent var is smooth\n  if( sum(is.smooth) > 0 ){\n    #replace s(independendVar) with s(independendVar, by = groupVar)\n    smoothVar.all[is.smooth] = paste0(\"s(\", independendVar,\",by=\",groupVar, \")\")\n  } else if(is.square){\n    #else if squared, add var*groupvar and var_SQUARED*groupvar\n    interactionVar = c(interactionVar, paste0(independendVar,\"*\",groupVar), paste0(independendVar,\"_SQUARED*\",groupVar) )\n  } else if(is.log){    \n    # else if log, interact with log(var)\n    log.independent = logVar[independendVar == substring(logVar,5,nchar(logVar)-1)]\n    interactionVar = c(interactionVar, paste0(log.independent,\"*\",groupVar) )\n  } else {\n    # else make normal interaction\n    interactionVar = c(interactionVar, paste0(independendVar,\"*\",groupVar) )\n  }\n}  #may need to do another if with ^2 independent variables\nsmoothVarInt.ind = grepl(\",by=\", smoothVar.all)\nsmoothVarInt = smoothVar.all[smoothVarInt.ind]\nsmoothVar =    smoothVar.all[!smoothVarInt.ind]\n\nif(0 %in% nchar(sqVar)) sqVar = character()\n\nprint(sqVar)\nprint(paste(\"length sqVar\",length(sqVar)))\n#nestVar = c(\"Site\", \"FamilyID\")\n#usercovVar =  usercovVar[!(usercovVar %in% nestVar)]\n\n#TODO: seperate Site and Familiy to another catagory of random effect\ninputs[['cov.fixed']][[which(unlist(inputs[['cov.fixed']]) == \"abcd_site\")]] = NULL\ninputs[['cov.fixed']][[which(unlist(inputs[['cov.fixed']]) == \"rel_family_id\")]] = NULL\n\ncovfixedVar    = paste(unlist(inputs[['cov.fixed']]), sep='+')\n\nsmoothVarInt.stripped.term1 = \"\"\nsmoothVarInt.stripped.term2 = \"\"\n\n\nif(length(smoothVarInt)>0){\n  smoothVarInt.stripped.term1 = unlist(lapply( strsplit(smoothVarInt,\",\"), function(x)x[[1]]))\n  smoothVarInt.stripped.term1 = substring(smoothVarInt.stripped.term1,3,nchar(smoothVarInt.stripped.term1))\n  smoothVarInt.stripped.term2 = unlist(lapply( strsplit(smoothVarInt,\"by=\"), function(x)x[[2]]))\n  smoothVarInt.stripped.term2 = substring(smoothVarInt.stripped.term2,1,nchar(smoothVarInt.stripped.term2)-1)\n}\n\n### if usercovVar's have been transformed, then they are stored in usercovVar as well as the \n### transformed vars (smoothVar, logVar, etc.), in which they will need to be removed from\n### usercovVar before putting into formula\nprint(paste(\"before remove\",usercovVar))\nprint(c( substring(smoothVar,3,nchar(smoothVar)-1),\n                                    smoothVarInt.stripped.term1,\n                                    smoothVarInt.stripped.term2,\n                                    substring(logVar,5,nchar(logVar)-1),\n                                    sqVar ))\ncov.ind.remove = usercovVar %in% c( substring(smoothVar,3,nchar(smoothVar)-1),\n                                    smoothVarInt.stripped.term1,\n                                    smoothVarInt.stripped.term2,\n                                    substring(logVar,5,nchar(logVar)-1),\n                                    sqVar )\nif(sum(cov.ind.remove)>0 ){\n  usercovVar = usercovVar[!cov.ind.remove]\n}\nprint(paste(\"after remove\",usercovVar))\n\n#remove covfixedVar when it is a smooth, smooth interaction (first variable), or log -- should usually only be age of covfixedVar\n#ok to keep it in as interaction, squared, or smooth interaction term\ncovfixedVar.ind.remove = covfixedVar %in% c( substring(smoothVar,3,nchar(smoothVar)-1),\n                                             smoothVarInt.stripped.term1,\n                                             substring(logVar,5,nchar(logVar)-1))\nif(sum(covfixedVar.ind.remove)>0 ){\n  covfixedVar = covfixedVar[!covfixedVar.ind.remove]\n}\n\n\nform_arr = c(independendVar, usercovVar,covfixedVar, smoothVar.all, logVar, interactionVar, sqVar, sqVar_SQUARED);\n#form_arr = c(independendVar, usercovVar,covfixedVar, smoothVar, logVar, interactionVar, sqVar, sqVar_SQUARED);\n#form_arr = c(independendVar, usercovVar,covfixedVar, smoothVar, logVar, interactionVar, sqVar, sqVar_SQUARED, groupVar);\n\n### similarly for the independent variable...\n#if independent variable is a smooth variable, log variable, or squared variable remove independendendVar from form_arr\nif(independendVar %in% c(  substring(smoothVar,3,nchar(smoothVar)-1),\n                           smoothVarInt.stripped.term1,\n                           substring(logVar,5,nchar(logVar)-1),\n                           sqVar ) ){\n  form_arr = c(usercovVar,covfixedVar, smoothVar.all, logVar, interactionVar, sqVar, sqVar_SQUARED);\n  #form_arr = form_arr[form_arr != independendVar]\n}\nform_arr = form_arr[form_arr!=\"\"]\n#take out duplicate variables\nform_arr = form_arr[!duplicated(form_arr)]\n\nformulastr = paste(dependendVar,\" ~ \",paste(form_arr,collapse='+'))\n#if(length(smoothVar) > 0){\n#  formulastr = paste(dependendVar,\" ~ \",paste(form_arr,collapse='+'),\"+\",smoothVar)\n#}\n\n#get variables involve in the formula\nvarList = all.vars(as.formula(formulastr));\nvarList.independent = varList[-1]\nprint(varList)\nprint(formulastr)\n\n#########################\n##  data manipulation  ##\n#########################\n#data = data[data$eventname == \"baseline_year_1_arm_1\",]\nprint(summary(data[[independendVar]]))\n#if independent variable has 5 or less unique values change it to character\/factor variable\ncategorical.independent = FALSE\n#if( length(table(data[[independendVar]])) < 6 ){\n#  data[[independendVar]] = as.character(data[[independendVar]])\n#  categorical.independent = TRUE\n#} else{\n#  data[[independendVar]] = as.numeric(as.character(data[[independendVar]]))\n#}\n\nif(class(data[[independendVar]]) != \"numeric\"){\n   categorical.independent = TRUE\n}\n\n#user defined covariates\n#for(ucov in unlist(inputs[['usercov.']])){\n#  data[[ucov]] = as.numeric(as.character(data[[ucov]]))\n#}\n\nprint(summary(data[[independendVar]]))\n#determine if logistic regression or not\ncategorical.dependent = FALSE\ndata[[dependendVar]][data[[dependendVar]] == \"\"] = NA\nif( length(table(data[[dependendVar]])) == 2 ){\n  data[[dependendVar]] = as.factor(data[[dependendVar]])\n  categorical.dependent = TRUE\n} else{\n  data[[dependendVar]] = as.numeric(as.character(data[[dependendVar]]))\n}\n#data[[dependendVar]] = as.numeric(as.character(data[[dependendVar]]))\n\n#if(\"demo_prnt_marital_v2\" %in% colnames(data)){\n  # Type of household\n  # 1 = Married, 6 = Living with a partner\n  # 2 = Widowed, 3 = Divorced, 4 = Separated, 5 = Never married\n#  marital_v2.old = data$demo_prnt_marital_v2\n#  data$demo_prnt_marital_v2 = NA\n#  data$demo_prnt_marital_v2[marital_v2.old %in% c(1,6)] = 1\n#  data$demo_prnt_marital_v2[marital_v2.old %in% 2:5] = 0\n#}\n\n# if(\"gender\" %in% colnames(data)){\n#   data = data[data$gender %in% c(\"M\",\"F\"),]\n# }\n#if(\"race.ethnicity\" %in% colnames(data)){\n#  data$race.ethnicity = as.factor(data$race.ethnicity)\n#}\n#income\n##NDA using demo_prtnr_income_v2\n#if(\"demo_comb_income_v2\" %in% colnames(data)){\n#  data$hhinc = NA\n#  data$hhinc[data$demo_comb_income_v2 %in% 1:6]  = \"[<50K]\"\n#  data$hhinc[data$demo_comb_income_v2 %in% 7:8]  = \"[>=50K&<100K]\"\n#  data$hhinc[data$demo_comb_income_v2 %in% 9:10] = \"[>=100K]\"\n#  data$demo_comb_income_v2 = data$hhinc\n#}\nif(\"household.income\" %in% names(data)){\n  data$household.income = as.character(data$household.income)\n  data$household.income[data$household.income == \"[>=50K & <100K]\"] = \"[>=50K& <100K]\"\n  data$household.income = as.factor(data$household.income)\n}\n\n\ndata = data[c(\"src_subject_id\",\"rel_family_id\",\"abcd_site\",varList)]\n##################\n##  subset data ##\n##################\nif(length(subsetVar)>0){\n    json_data = fromJSON(file = subsetVar);\n    subset = data.frame(src_subject_id=unlist(lapply(json_data[[1]]$set,function(d){ d[1] })), eventname=unlist(lapply(json_data[[1]]$set,function(d){d[2]})));\n    data = merge(subset, data, all.x = T, all.y = F)\n}\n\ndata = data[complete.cases(data),]\n\nprint(dim(data))\n\n### Independent variable class\n\n#TODO: Hard coding on the random effects,\n\n\n########################################################################\n##  remove independendVar (& groupVar) from formula to get delta R^2  ##\n########################################################################\n\nrun.effect.size = T\n\nif(run.effect.size){\n\n\nlogVar.stripped    = substring(logVar,5,nchar(logVar)-1)\nsmoothVar.stripped = substring(smoothVar,3,nchar(smoothVar)-1)\n\nif(length(interactionVar)>0){\n  ##INTERACTION\n  interaction.stripped.list = strsplit(interactionVar,\"*\",fixed=T)\n} else{\n  interaction.stripped.list = character()\n}\n\n\nif(independendVar %in% smoothVar.stripped){\n  ##SMOTH\n  smoothVar.remove = smoothVar[smoothVar.stripped == independendVar]\n  form_arr2 = form_arr[!(form_arr %in% smoothVar.remove)]\n} else if(independendVar %in% smoothVarInt.stripped.term1){\n  ##SMOTH INTERACTION\n  smoothVarInt.remove = smoothVarInt[smoothVarInt.stripped.term1 == independendVar]\n  form_arr2 = form_arr[!(form_arr %in% smoothVarInt.remove)]\n} else if(independendVar %in% logVar.stripped){\n  ##LOG\n  logVar.remove = logVar[logVar.stripped == independendVar]\n  form_arr2 = form_arr[!(form_arr %in% logVar.remove)]\n  if(length(groupVar)>0){\n    logVarinteraction.remove = c(paste0(logVar.remove,\"*\",groupVar) , groupVar)\n    form_arr2 = form_arr2[!(form_arr2 %in% logVarinteraction.remove)]\n  }\n} else if(independendVar %in% sqVar){\n  ##SQUARED\n  sqVar.remove = c(independendVar, paste0(independendVar,\"_SQUARED\"))\n  form_arr2 = form_arr[!(form_arr %in% sqVar.remove)]\n  if(length(groupVar)>0){\n    sqVarinteraction.remove = c(paste0(sqVar.remove,\"*\",groupVar), groupVar)\n    form_arr2 = form_arr2[!(form_arr2 %in% sqVarinteraction.remove)]\n  }\n} else if(independendVar %in% unlist(interaction.stripped.list)){\n  ##INTERACTION\n  independ.location = c()\n  for(ii in 1:length(interaction.stripped.list)){\n    int.stripped.list_i = interaction.stripped.list[[ii]]\n    independ.location[ii] = sum(independendVar == int.stripped.list_i)\n  }\n  interaction.remove = interactionVar[independ.location == 1]\n  interactionVars.remove = unlist(strsplit(interaction.remove,\"*\",fixed=T))\n  all.interactionVars.remove = c(interaction.remove,interactionVars.remove)\n  form_arr2 = form_arr[!(form_arr %in% all.interactionVars.remove)]\n} else {\n  #NO INDEPENDENT VAR TRANSFORMATION\n  form_arr2 = form_arr[!(form_arr %in% independendVar)]\n}\n\nif(length(form_arr2) > 0){\n  formulastr2 = paste(dependendVar,\" ~ \",paste(form_arr2,collapse='+'))\n} else{\n  formulastr2 = paste(dependendVar,\" ~ 1\")\n}\n\n\n}\n\n########################################\n##  make sure log doesn\u2019t create NAs  ##\n########################################\n\n# if(length(logVar.stripped)>0){\n#   for(ii in 1:length(logVar.stripped)){\n#     min.log_i = min(data[[logVar.stripped[ii]]])\n#     if(min.log_i < 0)  \n#       data[[logVar.stripped[ii]]] = data[[logVar.stripped[ii]]] - min.log_i + 1\n#   }\n# }\n\n############################\n##  run voxel gamm4 loop  ##\n############################\n\nif(!(independendVar %in% names(data))){\n  files = list.files(\"\/var\/www\/html\/data\/ABCD\/SurfaceMaps\/NBack\")\n  if(independendVar %in% files){\n    imaging = readMat(paste0(dir,\"\/\",independendVar))\n    betas = imaging$betamats[[1]][[1]]\n    betas = as.data.frame(betas)\n    dir = unlist(data.img$dirlist)\n    src_subject_id = paste0(\"NDAR_\",as.character(unlist(lapply(strsplit(dir, \"_\") , function(x){x[[3]]} ))))\n    \n    betas = cbind(src_subject_id,betas)\n    data.image = betas\n    \n    loop.stats = gamm4loop(data = data, data.image = data.image, formulastr2 = formulastr2)\n  }\n}\n\n\nprint(\"Before calling the model\")\n\n\n\n#################\n##  run model  ##\n#################\n\nif(categorical.dependent){ #logistic regression\n  model  = gamm4(as.formula(formulastr) , random = ~(1|abcd_site\/rel_family_id), family = binomial , data = data)\n  model2 = gamm4(as.formula(formulastr2) , random = ~(1|abcd_site\/rel_family_id), family = binomial , data = data)\n  \n} else{ #linear regression\n  model  = gamm4(as.formula(formulastr) , random = ~(1|abcd_site\/rel_family_id), data = data)\n  model2 = gamm4(as.formula(formulastr2) , random = ~(1|abcd_site\/rel_family_id), data = data)\n  \n}\n\nprint(summary(model$gam))\nprint(summary(model2$gam))\n\n########################\n##  other statistics  ##\n########################\n#N subjects, aic, bic, & r^2\nn = summary(model$gam)$n\naic = round(AIC(model$mer),2)\nbic = round(BIC(model$mer),2)\nr2   = round(summary(model$gam)$r.sq,5)\n#r2_2 = round(summary(model2$gam)$r.sq,5)\n\nr2_delta = round(as.numeric(r.squaredLR(model$mer,model2$mer)),5)\naic2 = round(AIC(model2$mer),2)\nbic2 = round(BIC(model2$mer),2)\n\n######################\n######################\n##    NEW PLOTS    ###\n######################\n######################\n\n#################################################################\n##  1. x-y scatter plot with fit (dot plot for categorical.independent x)  ##\n#################################################################\n\nif(categorical.independent == FALSE){\n  ###continuous\n  #make predicted data\n  n.pred.pts = 300\n  \n  #WHEN SMOOTH TERM AS INDEPENDENT VARIABLE, IT MOVES IT TO THE LAST LOCATION OF THE varList.independent\n  x = seq(min(data[[independendVar]], na.rm = T),\n          max(data[[independendVar]], na.rm = T),\n          length.out = n.pred.pts)\n  dat_predict = as.data.frame(matrix(nrow = n.pred.pts, ncol = length(varList.independent)))\n  #dat_predict = as.data.frame(matrix(nrow = n.pred.pts, ncol = length(form_arr)))\n  \n  ##if independent variable is not 1st spot in varList.independent, switch location with the 1st spot variable\n  x.ind = which(independendVar == varList.independent)\n  if(x.ind != 1){\n    var.switch = varList.independent[1]\n    varList.independent[1] = independendVar\n    varList.independent[x.ind] = var.switch\n    x.ind = 1\n  }\n  dat_predict[,1] = x\n  \n  if(length(varList.independent)>1){\n    for(ii in 2:length(varList.independent)){\n      # for(ii in 2:length(form_arr)){\n      #var = data[[form_arr[ii]]]\n      var = data[[varList.independent[ii]]]\n      if(class(var) == \"numeric\" & length(table(var)) > 5){\n        dat_predict[,ii] = as.numeric(mean(var, na.rm = T))\n      } else{\n        dat_predict[,ii] = Mode(var)\n      }\n    }\n  }\n  #names(dat_predict) = form_arr\n  names(dat_predict) = varList.independent\n  \n  #change independent squared variables\n  ## MAY NEED TO REDO WITH MULTIPLE INDEPENDENT VARIABLES\n  independendSqVar =  paste0(independendVar,\"_SQUARED\")\n  if(independendSqVar %in% varList.independent){\n    dat_predict[,independendSqVar] = dat_predict[,independendVar]^2\n  }\n  \n  ###ADD IN GROUPING TO PREDICTION\n  levels = 1\n  if(length(groupVar)>0){\n    dat_predict_list = list()\n    levels = unique(data[[groupVar]])\n    for(ii in 1:length(levels)){\n      dat_predict_i = dat_predict\n      dat_predict_i[, names(dat_predict_i) == groupVar] = levels[ii]\n      dat_predict_list[[ii]] = dat_predict_i\n    }\n    names(dat_predict_list) = levels\n  } else { \n    ## if no grouping variable, set dat_predict_list as the list version of dat_predict\n    dat_predict_list = list(dat_predict)\n  }\n  \n  # if(categorical.dependent){ #logistic\n  #   pred = predict(model$gam, dat_predict, se.fit = TRUE, type = \"response\")\n  # } else{ #linear\n  #   pred = predict(model$gam, dat_predict, se.fit = TRUE)\n  # }\n  \n  #predictions for list of predict dats\n  if(categorical.dependent){ #logistic\n    pred = lapply(dat_predict_list, function(x) predict(model$gam, x, se.fit = TRUE, type = \"response\"))\n  } else{ #linear\n    pred = lapply(dat_predict_list, function(x) predict(model$gam, x, se.fit = TRUE))\n  }\n  \n  #with(data, plot(cbcl_scr_syn_anxdep_t, nihtbx_picvocab_uncorrected))\n  #lines(x, pred$fit)\n  \n  fit = list()\n  upper = list()\n  lower = list()\n  for(ii in 1:length(levels)){\n    pred_i = pred[[ii]]\n    fit[[ii]] = pred_i$fit\n    upper[[ii]] = pred_i$fit + pred_i$se.fit*1.96\n    lower[[ii]] = pred_i$fit - pred_i$se.fit*1.96\n  }\n  \n  # upper = pred$fit + pred$se.fit*1.96\n  # lower = pred$fit - pred$se.fit*1.96\n  #lines(x, upper, col = \"red\")\n  #lines(x, lower, col = \"red\")\n  #x,y's of points\n  #plot(data[[independendVar]], as.numeric(data[[dependendVar]])-1)\n  #plot(data[[independendVar]], data[[dependendVar]])\n  # cols = c(\"red\",\"blue\")\n  # for(ii in 1:length(levels)){\n  #   lines(x,fit[[ii]],   col = cols[ii])\n  #   lines(x,upper[[ii]], col = cols[ii])\n  #   lines(x,lower[[ii]], col = cols[ii])\n  # }\n  \n  #lines(x,pred$fit)\n  #lines(x,upper)\n  #lines(x,lower)\n  #x,y's of fit\n  #x\n  #pred$fit\n  #y's of 95% confidence intervals\n  #as.numeric(lower)\n  #as.numeric(upper)\n  \n  #change names of logged dependent and independent variables for plot output \n  scatter_out1 = data\n  if(length(dependendVar.name)==1){\n    names(scatter_out1)[names(scatter_out1) == dependendVar] = paste0(\"log(\",dependendVar.name,\")\")\n  }\n  # logVar.remove = logVar[logVar.stripped == independendVar]\n  if(independendVar %in% logVar.stripped){\n    x = seq(min(log(data[[independendVar]]), na.rm = T),\n             max(log(data[[independendVar]]), na.rm = T),\n             length.out = n.pred.pts)\n    scatter_out1[[independendVar]] = log(scatter_out1[[independendVar]])\n    names(scatter_out1)[names(scatter_out1) == independendVar] = paste0(\"log(\",independendVar,\")\")\n  }\n  \n  #for rezidualized Y\n  scatter_out8 = scatter_out1\n  res2    = model2$gam$residuals\n  y.fit.plot = mean(data[[dependendVar]] , na.rm = T) + res2\n  scatter_out8[[dependendVar]] = as.numeric(y.fit.plot)\n  \n  # if(length(groupVar) >0)\n  \n  # lines_sub1 = data.frame(x = x, y =as.numeric(pred$fit))\n  # lines_sub2 = data.frame(x = x, y =as.numeric(lower))\n  # lines_sub3 = data.frame(x = x, y =as.numeric(upper))\n  # lines_out1 = list(lines_sub2,lines_sub1,lines_sub3)\n  \n  #if(length(levels) > 1){\n  lines_out1 = list()\n  for(ii in 1:length(levels)){\n    lines_sub1 = data.frame(x = x, y = as.numeric(fit[[ii]]))\n    lines_sub2 = data.frame(x = x, y =as.numeric(lower[[ii]]))\n    lines_sub3 = data.frame(x = x, y =as.numeric(upper[[ii]]))\n    lines_out1[[ii]] = list(lines_sub2,lines_sub1,lines_sub3)\n  }\n  \n  if(length(levels) > 1){\n    names(lines_out1) = levels\n  }\n  #plot(data[[independendVar]], data[[dependendVar]])\n  #lines(lines_out1[[1]][[1]]$x,lines_out1[[1]][[1]]$y, col = \"red\")\n  #lines(lines_out1[[1]][[2]]$x,lines_out1[[1]][[2]]$y, col = \"red\")\n  #lines(lines_out1[[1]][[3]]$x,lines_out1[[1]][[3]]$y, col = \"red\")\n  #lines(lines_out1[[2]][[1]]$x,lines_out1[[2]][[1]]$y, col = \"blue\")\n  #lines(lines_out1[[2]][[2]]$x,lines_out1[[2]][[2]]$y, col = \"blue\")\n  #lines(lines_out1[[2]][[3]]$x,lines_out1[[2]][[3]]$y, col = \"blue\")\n  \n} else{\n  \n  ###categorical.independent\n  coef = summary(model$gam)$p.coeff\n  vcov = as.matrix(summary(model$mer)$vcov)\n  beta.names = rownames(vcov)\n  \n  ind.contrasts = which(grepl(independendVar, beta.names))\n  vcov = vcov[c(1,ind.contrasts),c(1,ind.contrasts)]\n  c = diag(length(ind.contrasts))\n  c = cbind(1, c)\n  \n  new.variances = diag(c%*%vcov%*%t(c))\n  new.sds = sqrt(new.variances)\n  \n  int = as.numeric(coef[\"(Intercept)\"])\n  \n  mean.per.category = int + coef[ind.contrasts]\n  upper.95 = mean.per.category + 1.96*new.sds\n  lower.95 = mean.per.category - 1.96*new.sds\n  \n  point.estimates = as.data.frame(cbind(mean.per.category,upper.95,lower.95))\n  point.estimates$eff.names = rownames(point.estimates)\n  rownames(point.estimates) = NULL\n  \n  #add back intercept\n  int.stats = c(int, int + 1.96*sqrt(vcov[1,1]), int - 1.96*sqrt(vcov[1,1]), NA)\n  point.estimates = rbind(int.stats,point.estimates)\n\n  all.levels = paste0(independendVar,unique(data[[independendVar]]))\n  ref.level = all.levels[!all.levels %in% point.estimates$eff.names]\n  point.estimates$eff.names[1] = ref.level\n  # point.estimates$eff.names[1] = paste0(independendVar,\"_reference\")\n  \n  #plot\n  #ggplot(data = point.estimates, aes(x = eff.names, y = mean.per.category, ymin = lower.95, ymax = upper.95)) +\n  #  geom_point(position = position_dodge(width = 0.2)) +\n  #  geom_errorbar(position = position_dodge(width = 0.2), width = 0.1) +\n  #  coord_flip() +\n  #  scale_colour_manual(values = c(\"blue\", \"red\")) +\n  #  theme_bw() + labs(y = \"Mean\", x = \"Category\") + \n  #  theme(panel.grid.major.y = element_line(colour = \"grey\", linetype = \"dashed\"),\n  #        panel.grid.major.x = element_blank(),\n  #        panel.grid.minor.x = element_blank()) \n  \n  #means and confidence intervals for each category of a categorical predictor\n  #point.estimates\n  #scatter_out1 = list()\n  scatter_out1 = point.estimates\n  scatter_out8 = list()\n\n  lines_out1 = list()\n}\nprint(\"Finish plot 1\")\n#################\n##  2. qqplot  ##\n#################\n#qq = qq.gam(model$gam, type = \"response\")\n\n## Quick QQ-plot of deviance residuals\npdf(NULL)\nres = as.numeric(residuals(model$gam))\nres = scale(res)\nqq = qqnorm(res,pch=19,cex=.3)\n\n#qq = qqnorm(residuals(model$gam),pch=19,cex=.3)\n#qqline = qqline(residuals(model$gam))\n#qqline = qqline(res) #or...\n#lines(seq(-4,4,length.out = 100),seq(-4,4,length.out = 100))\n#x,y's of points\n#qq$x\n#qq$y\nscatter_out2 = data.frame(qq.x = qq$x,qq.y = as.numeric(qq$y))\nlines_out2 = data.frame(x = seq(-4,4,length.out = 100), y = seq(-4,4,length.out = 100))\nprint(\"Finish plot 2\")\n##########################################################################################################################\n##  3. histogram of dependent variable, and histogram of independent variable (barplots for categorical.independent x)  ##\n##########################################################################################################################\n###INDEPENDENT\n###continuous & independent\nif(categorical.independent == FALSE){\n#if logged...\n  if(independendVar %in% logVar.stripped){\n    hist.ind = hist(log(data[[independendVar]]),breaks= 20)\n  } else{\n    hist.ind = hist(data[[independendVar]],breaks= 20)\n  }\n  \n  scatter_out3 = list(breaks = hist.ind$breaks,counts = hist.ind$counts, type = \"numerical\")\n  lines_out3 = data.frame()\n  # #dependent\n  # hist.dep = hist(data[[dependendVar]],breaks = 20)\n  # \n  # scatter_out4 = list(breaks = hist.dep$breaks,counts = hist.dep$counts)\n  lines_out4= data.frame()\n} else {   \n  ###categorical & independent\n  counts = table(data[[independendVar]])\n  #barplot(counts, col = \"white\",xlab = independendVar,ylab = \"Frequency\",main = paste0(\"Barplot of \",independendVar))\n  \n  scatter_out3 = list(breaks = names(counts), counts = as.numeric(counts) , type = \"categorical\")\n  lines_out3 = data.frame()\n  scatter_out4 = data.frame()\n  lines_out4 = data.frame()\n}\n###DEPENDENT\n###continuous & dependent\nif(categorical.dependent == FALSE){\n  hist.dep = hist(data[[dependendVar]],breaks = 20)\n  scatter_out4 = list(breaks = hist.dep$breaks , counts = hist.dep$counts)\n} else{ \n  ###categorical & dependent\n  counts.dep = table(data[[dependendVar]])\n  #barplot(counts.dep, col = \"white\",xlab = dependendVar,ylab = \"Frequency\",main = paste0(\"Barplot of \",dependendVar))\n}\n\nprint(\"Finish plot 3\")\n######################################################\n##  4. residuals against fitted with lowess smooth  ##\n######################################################\n#residplot = plot(model$mer)\n#or\n# fitted = fitted(model$mer)\nfitted = as.numeric(fitted(model$gam))\nres    = model$gam$residuals\n#plot(fitted, res)\n\nloess = lowess(fitted, res)\n#lines(loess)\n\n#x,y's of points\n#as.numeric(fitted)\n#as.numeric(res)\n#x,y's of loess fit\n#loess$x\n#loess$y\n\ndata$fitted = fitted;\ndata$res = res;\nscatter_out5 = data;\n\n#scatter_out5 = data.frame(fitted, res)\nlines_out5 = list(data.frame(x = loess$x, y = loess$y))\nprint(\"Finish plot 4\")\n##########################################\n##  5. random effect histograms + sd\u2019s  ##\n##########################################\n#standard deviations of random effects\nranefs = as.data.frame(summary(model$mer)$varcor)[c(1,5)]\nsd.site = ranefs[ranefs$grp == \"abcd_site\",2]\nsd.family.site = ranefs[ranefs$grp == \"rel_family_id:abcd_site\",2]\nranefs = ranefs[ranefs$grp %in% c(\"abcd_site\", \"rel_family_id:abcd_site\",\"Residual\"),]\nnames(ranefs) = c(\"Group\",\"SD\")\nrownames(ranefs) = NULL\n\n#site\nran = ranef(model$mer)\nran.site = hist(ran$abcd_site[,1], breaks = 20,xlim = c(-9,11))\nran.site$breaks\nran.site$counts\n#family w\/in site\nran.fam.site = hist(ran$`rel_family_id:abcd_site`[,1], breaks = 20)\n\nran.fam.site$breaks\nran.fam.site$counts\nxmin = min(range(ran.site$breaks)[1],range(ran.fam.site$breaks)[1])\nxmax = max(range(ran.site$breaks)[2],range(ran.fam.site$breaks)[2])\n\n\nscatter_out6 = list(breaks = ran.site$breaks,counts = ran.site$counts, xmin = xmin, xmax = xmax, sd = sd.site)\nlines_out6= data.frame()\n\nscatter_out7 = list(breaks = ran.fam.site$breaks ,counts = ran.fam.site$counts, sd = sd.family.site)\nlines_out7= data.frame()\nprint(\"Finish plot 5\")\n###################\n##  Data Export  ##\n###################\n\nscatter = list(scatter_out1,scatter_out2,scatter_out3,scatter_out4,scatter_out5,scatter_out6,scatter_out7,scatter_out8)\nline\nlineplot = list(lines_out1,lines_out2,lines_out3,lines_out4,lines_out5,lines_out6,lines_out7)\nstatistics = list()\n\nptab = as.data.frame(summary(model$gam)$p.table)\nptab$Estimate = round(ptab$Estimate, 5)\nptab$`Std. Error` = round(ptab$`Std. Error`, 5)\nptab$`t value` = round(ptab$`t value`, 2)\n\nptab$sig = \"\"\nptab$sig[ptab$`Pr(>|t|)` < 0.1] = \".\"\nptab$sig[ptab$`Pr(>|t|)` < 0.05] = \"*\"\nptab$sig[ptab$`Pr(>|t|)` < 0.01] = \"**\"\nptab$sig[ptab$`Pr(>|t|)` < 0.001] = \"***\"\n\nptab$`Pr(>|t|)` = round(ptab$`Pr(>|t|)`,7)\nptab$`Pr(>|t|)`[ptab$`Pr(>|t|)` < 0.000001] = \"<1e-6\"\nptab = as.matrix(ptab)\n\nstatistics[[\"ptable\"]] = stargazer(ptab , type = \"html\")\n\n#statistics[[\"ptable\"]] = stargazer(summary(model$gam)$p.table,type = \"html\")\nstatistics[[\"formula\"]] = format(summary(model$gam)$formula);\nstatistics[[\"rantable\"]] = stargazer(ranefs,type=\"html\",summary=F,rownames=F)\nstatistics[[\"other.stats\"]] = list()\nstatistics[[\"other.stats\"]][[\"r2\"]]  =     paste0(\"R-squared adj.: \", r2);\nstatistics[[\"other.stats\"]][[\"r2_delta\"]]= paste0(\"\u0394R-squared (from independent and grouping variables): \",r2_delta,\" (\",round(100.0*r2_delta,digits=2),\"%)\");\nstatistics[[\"other.stats\"]][[\"n\"]]   =     paste0(\"N: \",n);\nstatistics[[\"other.stats\"]][[\"aic\"]] =     paste0(\"AIC: \",aic);\nstatistics[[\"other.stats\"]][[\"bic\"]] =     paste0(\"BIC: \",bic);\nstatistics[[\"other.stats\"]][[\"aic2\"]] =    paste0(\"AIC (null model): \",aic2);\nstatistics[[\"other.stats\"]][[\"bic2\"]] =    paste0(\"BIC (null model): \",bic2);\n\nstatistics[[\"formula\"]] = format(summary(model$gam)$formula)\n\n#statistics = list(ptable = stargazer(summary(model$gam)$p.table,type = \"html\"), rantable = stargazer(ranefs,type=\"html\"));\n\n#statistics = list(stargazer(summary(model$gam)$p.table,type = \"html\"),\n#                  stargazer(anova(model$gam)$pTerms.table,type = \"html\"));\n\n#if(length(s.table) > 0) statistics = list(statistics, stable = stargazer(s.table,type = \"html\"));\ns.table = as.data.frame(summary(model$gam)$s.table)\n\nif(length(s.table) > 0){\n  s.table$edf = round(s.table$edf,2)\n  s.table$Ref.df = round(s.table$Ref.df,2)\n  s.table$F = round(s.table$F,2)\n  \n  s.table$sig = \"\"\n  s.table$sig[s.table$`p-value` < 0.1] = \".\"\n  s.table$sig[s.table$`p-value` < 0.05] = \"*\"\n  s.table$sig[s.table$`p-value` < 0.01] = \"**\"\n  s.table$sig[s.table$`p-value` < 0.001] = \"***\"\n  \n  s.table$`p-value` = round(s.table$`p-value`,7)\n  s.table$`p-value`[s.table$`p-value` < 0.000001] = \"<1e-6\"\n  s.table = as.matrix(s.table)\n  \n  statistics[[\"stable\"]] = stargazer(s.table,type = \"html\");\n}\n\n\n###ERROR HERE stargazer(anova(model$gam)$pTerms.table,type = \"html\")\n### if only a smooth term and no other terms, then you an error will show\nanova.tab = as.data.frame(anova(model$gam)$pTerms.table)\nif(length(anova.tab)>0){\n  #statistics[[\"anova\"]] = list(stargazer(anova(model$gam)$pTerms.table,type = \"html\"))\n  anova.tab$F = round(anova.tab$F,2)\n  \n  anova.tab$sig = \"\"\n  anova.tab$sig[anova.tab$`p-value` < 0.1] = \".\"\n  anova.tab$sig[anova.tab$`p-value` < 0.05] = \"*\"\n  anova.tab$sig[anova.tab$`p-value` < 0.01] = \"**\"\n  anova.tab$sig[anova.tab$`p-value` < 0.001] = \"***\"\n  \n  anova.tab$`p-value` = round(anova.tab$`p-value`,7)\n  anova.tab$`p-value`[anova.tab$`p-value` < 0.000001] = \"<1e-6\"\n  \n  anova.tab = as.matrix(anova.tab)\n  statistics[[\"anova\"]] = list(stargazer(anova.tab , type = \"html\"))\n  \n} else{\n  statistics[[\"anova\"]] =  list()\n}\n\n\n# Add a table1 data summary\n# WORK IN PROGRESS\n# Issue: this table does not show the categorical variables (see https:\/\/stackoverflow.com\/questions\/25389683\/obtaining-separate-summary-statistics-by-categorical-variable-with-stargazer-pac)\nstatistics[[\"table1\"]] = list(stargazer(data, type=\"html\", summary.stat = c(\"n\", \"mean\", \"sd\")))\n\ntunnel = list()\ntunnel[[\"loopStats\"]] = loop.stats\n\n\n#table1 = list(stargazer(data, type=\"html\", summary.stat = c(\"n\", \"mean\", \"sd\")))\n#append(table1[[1]],\"42\",after=3)\n#statistics[[\"table1\"]] = table1\n"}],"screen-position":{"top":97,"left":1221},"gid":"00368985-2e16-4889-835c-e2f2aca43438","enabledisable-id":"cf5502b5-88f9-4e73-b8d6-1f084b437a3d"},{"name":"Measure All (single)","id":"measure-single","group":"Input","description":"input","inputs":[],"outputs":[{"name":"out","type":"constant-text","id":"209e602c-78b3-465e-8503-4c7c6c04c0d2"}],"state":[{"name":"id","type":"text","gid":"3c5f8490-d0b1-4b5b-a72f-9d8574628a44","value":"fl.var"},{"name":"name","type":"text","gid":"3c5f8490-d0b1-4b5b-a72f-9d8574628a44","value":"Subsetting (In progress)"},{"name":"default","type":"text","gid":"3c5f8490-d0b1-4b5b-a72f-9d8574628a44"},{"name":"value","type":"text","gid":"3c5f8490-d0b1-4b5b-a72f-9d8574628a44"}],"screen-position":{"top":747,"left":952},"gid":"3c5f8490-d0b1-4b5b-a72f-9d8574628a44","enabledisable-id":"195ef946-1db7-497e-bdc8-0adef10a5bdf"}],"connections":[{"id":"0fce2d50-0193-40b9-be47-3108de9a28a1","source":"port-output-1ba4c758-4cd7-4bfe-8870-8588f311c769","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"5a631626-c8c4-41b8-bd45-3da951f14ef1","source":"port-output-ced51cbb-abb4-45c3-a5e3-d4fa06cc6cc3","target":"port-input-d0b1e6c6-2e95-4e3a-badf-ce0051dbbf53","source-side":"right","target-side":"left"},{"id":"05a62d81-aa1a-4488-88ff-2f5efe38288e","source":"port-output-dfb15146-bb00-4655-858c-62ccec593001","target":"port-input-e9dfd108-c1e1-4b85-b50b-eb3b27dc6394","source-side":"right","target-side":"left"},{"id":"29d5b545-3ee1-4d53-b198-acd140a3097b","source":"port-output-440da713-92c5-4b9d-9205-74e314b0cb82","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"0da3eab7-e364-426c-b4f5-37b01f4e7254","source":"port-output-797e8a1c-0799-4e39-aef3-ec50e81a90c5","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"a590877a-e98b-46ab-a5a4-8873501a3b29","source":"port-output-3226f90e-a1ea-4e78-8772-8fa60a49eac4","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"710ca707-c82b-4091-aa99-2ab2ce7ca684","source":"port-output-f046675d-5841-44cb-ab5e-60912f5c179a","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"be3f5682-fca9-4c8b-9de4-a4ce318255bd","source":"port-output-3c06fa2a-5479-49f3-b1c9-fe1098420a57","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"582a0871-4e00-4023-9bb0-60107ad2e0a9","source":"port-output-dfbdf064-5cf5-4087-b73f-e093fb340c12","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"3a2b1fdb-aab7-49f7-9e7a-20c2c1998075","source":"port-output-a090b405-f3af-4655-8706-24634c69200b","target":"port-input-64de6011-ff94-4b30-8568-fec371dd6804","source-side":"right","target-side":"left"},{"id":"b9e94f57-2760-40d0-8665-6375635a5ca8","source":"port-output-b0b845c1-9494-462b-882a-b97383400416","target":"port-input-058032eb-2a92-4698-b090-6b4b68524055","source-side":"right","target-side":"left"},{"id":"5f0f4dc7-797b-499a-ada1-95403cacd04b","source":"port-output-10c3487e-51ff-4862-b3d0-226fd4107478","target":"port-input-5467c3d0-18ad-42e6-b472-f549b56c62b7","source-side":"right","target-side":"left"},{"id":"aa53f473-8066-42da-8682-be23aa02dc5b","source":"port-output-209e602c-78b3-465e-8503-4c7c6c04c0d2","target":"port-input-db5d6525-0f38-498f-910d-07f221ac7e65","source-side":"right","target-side":"left"},{"id":"ebe4fc58-22cb-4b99-8520-2d83baca74e4","source":"port-output-049c008e-3e9f-43fb-bb41-0eefbf4937b8","target":"port-input-47323a39-d2b2-42c1-8ad6-24c4e7dd527b","source-side":"right","target-side":"left"},{"id":"47593b67-c39b-4f33-881b-49ef05e5dde2","source":"port-output-fffb4252-410a-4b9e-82e7-323d0c8ca46d","target":"port-input-70c815d1-a8b0-49f9-843b-ed55367693dd","source-side":"right","target-side":"left"},{"id":"5f0a4c74-efe0-4234-a7d4-e4772b138a22","source":"port-output-08ddaa6d-2c77-4ade-ad36-d04596416214","target":"port-input-d3b31483-dbfb-43d8-9944-ae4b22c36a79","source-side":"right","target-side":"left"},{"id":"9b0d6a32-01a8-42f2-976c-0a20e471d693","source":"port-output-28b12798-18bf-4a96-a27d-36c70120d0f6","target":"port-input-7eb5b00e-2691-470f-a80c-0907dd69dc35","source-side":"right","target-side":"left"},{"id":"5c071053-a744-4144-afe7-87a09f2bc145","source":"port-output-49e486ad-699c-412f-963c-d1ec0709cff9","target":"port-input-fb967c61-4ba7-4fa4-a3dc-af1490f08718","source-side":"right","target-side":"left"},{"id":"0180e1d1-e6d0-40de-af37-2ee7d5c9ee1b","source":"port-output-a7cc9f44-4879-4118-b0ab-51f8e6169502","target":"port-input-ffd98a46-903a-4bcb-88f6-3e5bc708c263","source-side":"right","target-side":"left"},{"id":"69ebcfaf-dff8-442b-924c-f06877a48933","source":"port-output-f6a6c305-7219-4be4-88d5-e8875da3ce11","target":"port-input-1ae8bca6-3032-4096-b10c-57542d7acfe5","source-side":"right","target-side":"left"},{"id":"2db113f8-3714-4722-af56-b62c02f8e81a","source":"port-output-6825b4df-6c7a-4d59-801c-f0bb2b52f327","target":"port-input-ca1dc1b3-1f7c-4924-a336-42e32ad25ce7","source-side":"right","target-side":"left"},{"id":"48107d35-08e6-4cbe-a6d7-c98d80ea8002","source":"port-output-3ea903f2-93d1-4fa4-86a3-63e62e54bc59","target":"port-input-e6e21ade-af9f-473a-bbd7-a10fc7ce37bc","source-side":"right","target-side":"left"},{"id":"9c1d3dc8-fe7d-4d49-a716-e03fbc81bdaf","source":"port-output-1b27adc4-cdff-412c-872e-eef2f3b45f62","target":"port-input-1c321d5d-9c29-4230-8a27-31e0a03c163a","source-side":"right","target-side":"left"},{"id":"450c8339-2562-4c94-b175-0357dab1767b","source":"port-output-04c66995-b4b9-44aa-894b-c0ef3e78c660","target":"port-input-d2ff5368-b2ee-4325-81e7-936254f697cd","source-side":"right","target-side":"left"},{"id":"f2fdb2eb-3b1a-4648-aca9-ab77317e3c69","source":"port-output-d5dc5d9e-d336-46c6-9522-5fa279c53a18","target":"port-input-e376616d-2f95-408c-b225-860d270247e1","source-side":"right","target-side":"left"},{"id":"f1076b1d-b357-4c1e-b72a-62037bfe3492","source":"port-output-2d27eac7-4f1c-4d6c-b429-0eb20e5c9ec6","target":"port-input-cc9e7950-f3b2-4a30-8446-456a05a22ffa","source-side":"right","target-side":"left"},{"id":"5597e41c-1084-4ca9-8a69-190a87f1b854","source":"port-output-7413944d-42c5-421b-b233-4d759c0944c0","target":"port-input-62b02bc1-048f-43b2-8586-8fb643b1ee6b","source-side":"right","target-side":"left"}],"description":"","envelope":[{"lastSavedByUserName":"chasereuter1","lastSavedByUserEmail":"chasereuter1@gmail.com","lastSaveAtDate":"2018-05-08T11:52:16-07:00"},{"lastSavedByUserName":"admin","lastSavedByUserEmail":"hbartsch@ucsd.edu","lastSaveAtDate":"2018-05-08T11:50:46-07:00"},{"lastSavedByUserName":"admin","lastSavedByUserEmail":"hbartsch@ucsd.edu","lastSaveAtDate":"2018-05-04T09:53:09-07:00"}]}